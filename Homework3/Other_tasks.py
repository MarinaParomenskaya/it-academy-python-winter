# 4. Пары элементов
# Дан список чисел. Посчитайте, сколько в нем пар элементов,
# равных друг другу. Считается, что любые два элемента,
# равные друг другу образуют одну пару, которую необходимо посчитать.
# Входные данные - строка из чисел, разделенная пробелами.
# Выходные данные - количество пар.
# Важно: 1 1 1 - это 3 пары, 1 1 1 1 - это 6 пар

num_string = '4 1 2 3 1 4 3 4 2 3 4 5 2 3 4'
dct = {}
lst1 = num_string.split()
for i, el in enumerate(lst1):
    el_index = i
    dct[el] = dct.get(el, 0)
    while el in lst1[el_index + 1:]:
        dct[el] += 1
        el_index += lst1[el_index + 1:].index(el) + 1
print('Number of pairs:', dct)

# 5. Уникальные элементы в списке
# Дан список. Выведите те его элементы, которые встречаются
# в списке только один раз. Элементы нужно выводить в том порядке,
# в котором они встречаются в списке.

lst2 = ['a', 'b', 'p', 'c', 'd', 'y', 'a', 't', 'c',
        'h', 'o', 'd', 'd', 'b', 'n', 'b']
print('\nUnique elements in list: ')
for i, el in enumerate(lst2):
    if el not in lst2[:i - 1] + lst2[i + 1:]:
        print(el, end='')

# 6. Упорядоченный список.
# Дан список целых чисел. Требуется переместить все ненулевые
# элементы в левую часть списка, не меняя их порядок,
# а все нули - в правую часть. Порядок ненулевых элементов
# изменять нельзя, дополнительный список использовать нельзя,
# задачу нужно выполнить за один проход по списку.
# Распечатайте полученный список.

lst3 = [0, 4, 7, 0, 1, 5, 8, 0, 0, 0, 0, 8, 12, 0, 2, 6, 1, 0]
print('\n\nOld list:', lst3)
i = 0
end_index = len(lst3)
while i < end_index:
    if lst3[i] == 0:
        lst3.append(lst3.pop(i))
        i -= 1
        end_index -= 1
    i += 1
print('New list:', lst3)
